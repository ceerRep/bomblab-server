<html>

<head>
    <title>Bomblab Server</title>
    <link href="https://cdn.jsdelivr.net/npm/syzoj-public-cdn@1.0.6/cdnjs/semantic-ui/2.4.1/semantic.min.css"
        rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/syzoj-public-cdn@1.0.6/cdnjs/morris.js/0.5.1/morris.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/syzoj-public-cdn@1.0.6/google-fonts/fira-mono.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/syzoj-public-cdn@1.0.6/google-fonts/lato.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/syzoj-public-cdn@1.0.6/google-fonts/open-sans.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/syzoj-public-cdn@1.0.6/google-fonts/exo-2.css" rel="stylesheet">
    <script data-cfasync="false"
        src="https://cdn.jsdelivr.net/npm/syzoj-public-cdn@1.0.6/cdnjs/jquery/3.3.1/jquery.min.js"></script>
    <style type="text/css">
        body>.grid {
            height: 100%;
        }
    </style>
</head>

<body>
    <h1 class="ui center aligned header" style="padding-top: 30px; padding-bottom: 15px; ">
        Bomblab&nbsp;Scoreboard
    </h1>
    <div class="ui center aligned grid">
        <div class="column">
            <table class="ui sortable celled table">
                <thead>
                    <tr>
                        <% let stage_passed = stages.map(_=>0); %>
                        <th>Name</th>
                        <% for (let stage of stages) { %>
                        <th><%= stage.labname %>.<%= stage.stagename %></th>
                        <% } %>
                        <th> Total </th>
                        <th> Score </th>
                    </tr>
                </thead>
                <tbody>
                    <% for (let student of students) { %>
                    <tr>
                        <td><%= student.studentId %></td>
                        <% let i = 0; 
                        let score = 0, booms = 0;
                        for (let stage of student.stages) { %>
                        <td class="<%= stage.passed ? 'positive' : (stage.booms > 0 ? 'negative' : '') %>">
                            <%= stage.booms %>
                        </td>
                        <% if (stage.passed) { stage_passed[i] += 1; score += 1; }
                        booms += stage.booms;
                        i++;
                        } %>
                        <td><%= booms %></td>
                        <td><%= score %></td>
                    </tr>
                    <% } %>
                </tbody>
                <tfoot>
                    <tr>
                        <th><%= students.length %> students</th>
                        <% for (let count of stage_passed) { %>
                        <th> <%= count %> passed</th>
                        <% } %>
                        <th></th>
                        <th></th>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>


    <script data-cfasync="false"
        src="https://cdn.jsdelivr.net/npm/syzoj-public-cdn@1.0.6/cdnjs/semantic-ui/2.4.1/semantic.min.js"></script>
    <script>
        (function ($) {
            $.tablesort = function ($table, settings) {
                var self = this;
                this.$table = $table;
                this.$thead = this.$table.find('thead');
                this.settings = $.extend({}, $.tablesort.defaults, settings);
                this.$sortCells = this.$thead.length > 0 ? this.$thead.find('th:not(.no-sort)') : this.$table.find('th:not(.no-sort)');
                this.$sortCells.on('click.tablesort', function () {
                    self.sort($(this));
                });
                this.index = null;
                this.$th = null;
                this.direction = null;
            };

            $.tablesort.prototype = {

                sort: function (th, direction) {
                    var start = new Date(),
                        self = this,
                        table = this.$table,
                        rowsContainer = table.find('tbody').length > 0 ? table.find('tbody') : table,
                        rows = rowsContainer.find('tr').has('td, th'),
                        cells = rows.find(':nth-child(' + (th.index() + 1) + ')').filter('td, th'),
                        sortBy = th.data().sortBy,
                        sortedMap = [];

                    var unsortedValues = cells.map(function (idx, cell) {
                        if (sortBy)
                            return (typeof sortBy === 'function') ? sortBy($(th), $(cell), self) : sortBy;
                        return ($(this).data().sortValue != null ? $(this).data().sortValue : $(this).text());
                    });
                    if (unsortedValues.length === 0) return;

                    //click on a different column
                    if (this.index !== th.index()) {
                        this.direction = 'asc';
                        this.index = th.index();
                    }
                    else if (direction !== 'asc' && direction !== 'desc')
                        this.direction = this.direction === 'asc' ? 'desc' : 'asc';
                    else
                        this.direction = direction;

                    direction = this.direction == 'asc' ? 1 : -1;

                    self.$table.trigger('tablesort:start', [self]);
                    self.log("Sorting by " + this.index + ' ' + this.direction);

                    location.hash = encodeURI(JSON.stringify({ index: th.index(), direction: direction }));

                    // Try to force a browser redraw
                    self.$table.css("display");
                    // Run sorting asynchronously on a timeout to force browser redraw after
                    // `tablesort:start` callback. Also avoids locking up the browser too much.
                    setTimeout(function () {
                        self.$sortCells.removeClass(self.settings.asc + ' ' + self.settings.desc);
                        for (var i = 0, length = unsortedValues.length; i < length; i++) {
                            sortedMap.push({
                                index: i,
                                cell: cells[i],
                                row: rows[i],
                                value: unsortedValues[i]
                            });
                        }

                        sortedMap.sort(function (a, b) {
                            return self.settings.compare(a.value, b.value) * direction;
                        });

                        $.each(sortedMap, function (i, entry) {
                            rowsContainer.append(entry.row);
                        });

                        th.addClass(self.settings[self.direction]);

                        self.log('Sort finished in ' + ((new Date()).getTime() - start.getTime()) + 'ms');
                        self.$table.trigger('tablesort:complete', [self]);
                        //Try to force a browser redraw
                        self.$table.css("display");
                    }, unsortedValues.length > 2000 ? 200 : 10);
                },

                log: function (msg) {
                    if (($.tablesort.DEBUG || this.settings.debug) && console && console.log) {
                        console.log('[tablesort] ' + msg);
                    }
                },

                destroy: function () {
                    this.$sortCells.off('click.tablesort');
                    this.$table.data('tablesort', null);
                    return null;
                }

            };

            $.tablesort.DEBUG = false;

            $.tablesort.defaults = {
                debug: $.tablesort.DEBUG,
                asc: 'sorted ascending',
                desc: 'sorted descending',
                compare: function (a, b) {
                    if (a > b) {
                        return 1;
                    } else if (a < b) {
                        return -1;
                    } else {
                        return 0;
                    }
                }
            };

            $.fn.tablesort = function (settings) {
                var table, sortable, previous;
                return this.each(function () {
                    table = $(this);
                    previous = table.data('tablesort');
                    if (previous) {
                        previous.destroy();
                    }
                    table.data('tablesort', new $.tablesort(table, settings));
                });
            };

        })(window.Zepto || window.jQuery);

        $('table').tablesort({
            compare: function (a, b) {
                return parseInt(a) - parseInt(b);
            }
        })

        try {
            var hash = JSON.parse(decodeURI(location.hash).substr(1));
            console.log($('thead').children(0).children(hash.index));
            $('thead').children().children().eq(hash.index).addClass('sorted ' + (hash.direction == 1 ? 'ascending' : 'descending'));
        } catch (error) {
            console.log(error);
        }

        $('.ascending').click();
        $('.descending').click();
        $('.descending').click();

        setTimeout(() => window.location.reload(), 60 * 1000);
    </script>
</body>

</html>
